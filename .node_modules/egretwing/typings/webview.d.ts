/// <reference path="./node.d.ts" />
/// <reference path="./core.d.ts" />
/// <reference path="./dom.d.ts" />
/// <reference path="./intl.d.ts" />
/// <reference path="./global.d.ts" />
/// <reference path="./electron.d.ts" />

declare namespace wing {
    export namespace webview {
        export namespace ipc {
            export function on(channel: string, listener: (event: Event, ...args: any[]) => void): void;
            export function once(channel: string, listener: (event: Event, ...args: any[]) => void): void;
            export function removeListener(channel: string, listener: (event: Event, ...args: any[]) => void): void;
            export function removeAllListeners(channel?: string): void;
           /**
            * Send ...args to the renderer via channel in asynchronous message
            * This is mainly used by the page in <webview> to communicate with host page.
            */
            export function sendToHost(channel: string, ...args: any[]): void;
            /**
             * Like ipc.sendToHost but the message will be sent to the extension process instead of the renderer process.
             * This is mainly used by the page in <webview> to communicate with extension.
             */
            export function sendToExtensionHost(channel: string, ...args: any[]): void;
            /**
             * close the webview page
             */
            export function close(): void;
        }
    }
}