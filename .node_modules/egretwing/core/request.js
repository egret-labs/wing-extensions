var url = require('url');
var http = require('http');
var https = require('https');

function request(options, callback) {
    var endpoint = url.parse(options.url);
    var opts = {
        hostname: endpoint.hostname,
        port: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),
        path: endpoint.path,
        method: options.type || 'GET',
        headers: options.headers,
        agent: options.agent,
        rejectUnauthorized: options.strictSSL === false ? options.strictSSL : true
    }

    if (options.user && options.password) {
        opts.auth = options.user + ':' + options.password;
    }

    var protocol = endpoint.protocol === 'https:' ? https : http;
    var req = protocol.request(opts, function (res) {
        if (res.statusCode >= 300 && res.statusCode < 400 && options.followRedirects && options.followRedirects > 0 && res.headers['location']) {
            request(assign({}, options, {
                url: res.headers['location'],
                followRedirects: options.followRedirects - 1
            }), function (err, req, res) {
                callback && callback(err, req, res);
            });
        } else {
            callback(null, req, res)
        }
    });
    req.on('error', function (err) {
        callback(err);
    });

    if (options.timeout) {
        req.setTimeout(options.timeout);
    }
    if (options.data) {
        req.write(options.data);
    }

    req.end();
}
exports.request = request;

function getContents(options, callback) {
    request(options, function (err, req, res) {
        if (err) {
            return callback(err, res);
        }
        if (!((res.statusCode >= 200 && res.statusCode < 300) || res.statusCode === 1223)) {
            return callback(new Error('Server returned ' + res.statusCode), res);
        }

        if (res.statusCode === 204) {
            return callback(null, res, null);
        }

        var buffer = [];
        res.on('data', function (d) { buffer.push(d); });
        res.on('end', function () { callback(null, res, buffer.join('')); });
        res.on('error', function (e) { callback(e, res); });
    });
}
exports.getContents = getContents;

function assign(destination) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    sources.forEach(function (source) { return Object.keys(source).forEach(function (key) { return destination[key] = source[key]; }); });
    return destination;
}